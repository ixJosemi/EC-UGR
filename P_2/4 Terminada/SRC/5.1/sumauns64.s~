.section .data						#Sección de datos del proceso
	.macro linea					#Sucesiones de números que vamos a sumar. Se coge uno cada vez.
	 .int 1,1,1,1
	# .int 2,2,2,2
	# .int 1,2,3,4
	# .int -1,-1,-1,-1
	# .int 0xffffffff,0xffffffff,0xffffffff,0xffffffff
	# .int 0x08000000,0x08000000,0x08000000,0x08000000
	# .int 0x10000000,0x20000000,0x40000000,0x80000000
	
	.endm
		
lista:		
	.irpc i,01234567 		#Número de repeticiones del macro en cada ejecución. En este caso serían 8.
		linea
	.endr

longlista:	.int (.-lista)/4
resultado:	.quad 0x0123456701234567 #2x8 = 16
formato:	
	.ascii "suma = %llu = %llx hex\n\0" # %llu (muestra long long unsigned)

.section .text
#_start:	.global _start  #Inicio el proceso en ensamblador, no necesario 
main:		.global main  	#Inicio del proceso para usar printf

	mov    $lista, %ebx
	mov longlista, %ecx
	call suma
	mov %eax, resultado
	mov %edx, resultado+4 #4bytes más (bits más significativos)

	push resultado+4
	push resultado #Meto en pila resultado.
	push resultado+4
	push resultado 
	push $formato 	#Guarda en pila lo que está dentro de la variable formato
	call printf 	#Te muestra todo lo que hay en pila. Te imprime por pantalla.
	add $20, %esp 	#Esto es lo mismo que hacer 5 pop %ebx, puesto que push resta 4 a pila y pop +4 (5x4 = 20).esp

	mov $1, %eax 	#Instrucciones necesarias
	mov $0, %ebx
	int $0x80

suma:
	push %esi
	mov $0, %eax
	mov $0, %edx
	mov $0, %esi
bucle:
	add (%ebx,%esi,4), %eax
	adc $0, %edx 			#Suma acarreo
	inc       %esi 			#Incrementar 1
	cmp  %esi,%ecx 			#comparar
	jne bucle 			#salta si != bucle

	pop %esi
	ret 				#return
